Beta  1.0.3 - 2009-xx-xx



Alpha  1.0.2 - 2008-12-19

- Adding test/unit as a basis for general unit tests based on the new
  test framework, see test/unit/example for basic usage examples (Ulf)

- Fixed MySQL_PreparedStatement::setBlob() to really work. In the tests
  there is a simple example of a class implementing sql::Blob. (Andrey)

- Addition of a new unit test framework for JDBC compliance and
  regression testing. (Lawrin)

- Implemented MySQL_ResultSetMetaData::getPrecision() and
  MySQL_Prepared_ResultSetMetaData::getPrecision(),
  updating example. (Andrey)

- Fixing bug in FLOAT handling. (Andrey)

- Fixing bug in getString():
  getString() is binary safe now (Andrey),
  new example. (Ulf)

- Fixing bugs in MySQL_PreparedStatements:
  setBigInt() and setDatetime() have decremented the internal column
  index before forwarding the request. This resulted in double-decrement
  and wrong internal column index. Typical error message:
  setString() ... invalid "parameterIndex" (Ulf)

- Adding PHP script examples/cpp_trace_analyzer.php to filter the
  output of the debug trace. Please see the inline comments for documentation.
  This script is unsupported! We do no promise to maintain it. (Ulf)

- Fixed bugs in MySQL_DatabaseMetaData :
  All supportsCatalogXXXXX methods were returning `true` and
  all supportSchemaXXXX methods false, which is not as it should be.
  Now it is reversed, to be consistent with the rest. (Andrey)

- Implemented MySQL_PreparedStatement::clearParameters(). (Andrey)

- Fixed a bug in MySQL_ConnectionMetaData::getColumns() which was
  performing a cartesian product of the columns in the table times
  the columns matching columnNamePattern. example/connection_meta_schemaobj.cpp
  extended to cover the function. (Andrey)

- Fixed lame bug in MySQL_ConnectionMetaData::getIndexInfo() which
  did not work because the schema name wasn't included in the query sent
  to the server. (Andrey)

- Implemented MySQL_PreparedStatement::setNull(). (Andrey)

- Reverted implementation of MySQL_DatabaseMetaData::getTypeInfo().
  Now unimplemented. In addition, removed cppconn/datatype.h for now
  till we havea proper implementation of the types.

- DATE, DATETIME and TIME are now being handled when calling
  MySQL_PreparedResultSet::
  -- getString()
  -- getDouble()
  -- getInt()
  -- getLong()
  -- getBoolean()

- Fixed MySQL_PreparedStatementResultSet::getDouble() to return proper
  value when the underlying type is MYSQL_TYPE_FLOAT. (Andrey)

- Changed ResultSetMetaData::
  -- getColumnDisplaySize()
  -- getPrecision()
  -- getScale()
  to return unsigned int instead of signed int. (Andrey)

- Implemented getScale(), getPrecision() and getColumnDisplaySize() for
  MySQL_ResultSetMetaData and MySQL_Prepared_ResultSetMetaData. (Andrey)


Alpha  1.0.1 - 2008-12-01

- New directory layout

- MySQL Workbench 5.1 using Connector/C++ for its database connectivity.

- Addition of Connector/J tests converted

- Changing sql::DbcException to implement the interface of JDBC's SQLException.
  And renamed it to sql::SQLException.

- Renamed sql::DbcInvalidArgument to sql::InvalidArgumentException

- Renamed sql::DbcMethodNotImplemented to sql::MethodNotImplementedException

- All tests changed to create TAP compliant output

- Introduction of experimental CPack support, see make help

- Metadata: switching to column names "TABLE_CAT" (was: TABLE_CATALOG) and
  "TABLE_SCHEM" (was: TABLE_SCHEMA) for JDBC compliance

- ConnectionMetaData::getImportedKeys():
  PKTABLE_CATALOG -> PKTABLE_CAT, PKTABLE_SCHEMA -> PKTABLE_SCHEM,
  FKTABLE_CATALOG -> FKTABLE_CAT, FKTABLE_SCHEMA -> FKTABLE_SCHEM

- ConnectionMetaData::getPrimaryKeys():
  COLUMN -> COLUMN_NAME, SEQUENCE -> KEY_SEQ, INDEX_NAME -> PK_NAME

- ConnectionMetaData::getProcedures:
  PROCEDURE_SCHEMA -> PROCEDURE_SCHEM

- ConnectionMetaData::getTables:
  TABLE_COMMENT -> REMARKS

- All examples can be given optional connection parameters on the command
  line, for example
  `examples/connect tcp://host:port user pass database`
  or
  `examples/connect unix:///path/to/mysql.sock user pass database`

- Adding experimental GCov support, cmake -DMYSQLCPPCONN_GCOV_ENABLE:BOOL=1

- ConnectionMetaData::getCatalogTerm() returns n/a, there is no counterpart
  to catalog in Connector/C++

- Addition of ConnectionMetaData::getSchemas() and  Connection::setSchema().
  None of them is in the JDBC standard

- Driver Manager removed

- `(n)make install` works.  You can change the default installation path.
  Read carefully the messages after executing cmake. Installed are the static
  and the dynamic version of the library, libmysqlcppconn as well as the
  generic interface cppconn + 3 MySQL specific headers
  -- mysql_driver.h (if you want to get your connections from the driver
     instead of instantiating a MySQL_Connection object. This makes your code
	 pretty portable against the common interface)
  -- mysql_connection.h - If you intend to link directly to the MySQL_Connection
     class and use its specifics not found in sql::Connection
  However, you can make your application fully abstract by not using the two
  headers above but the generic headers.

- sql::mysql::MySQL_SQLException is gone. There is no distinction between
  server and client (= Connector) caused errors based on the type of the
  exception. However, you can still check the error code to figure out the
  reason.


Preview 1.0.0  - 2008-08-05

- First public release
